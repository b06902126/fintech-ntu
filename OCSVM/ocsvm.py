# -*- coding: utf-8 -*-
"""OCSVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KeTNDIouN75lKnig8bLeQn21eN8G6Vw3
"""
"""
if you run on colab, you need to run the code below
make sure you have fintech_features.zip on google drive


from google.colab import drive
drive.mount('/content/drive')

!cp drive/MyDrive/fintech_features.zip /content

!unzip -q fintech_features.zip
"""
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.font_manager
from sklearn import svm
import csv

total = 0
abnormal = []
Normal = []
Index = []
with open('fintech_features.csv',newline = '',encoding='utf-8-sig') as file:
  rows = csv.reader(file)
  for row in rows:
    total += 1
    if len(Index) == 0:
      Index = row
    else:
      if row[13] == '1' and len(row[1]) == 66 and (row[14] == row[0]): # find abnormal data
        if row not in abnormal: # check if repeat
          abnormal.append([row[5],int(row[10])])#[row[2],row[3],row[5],float(row[6]),float(row[7]),float(row[8]),int(row[10]),int(row[11]),row[12],int(row[16]),int(row[17]),int(row[18]),int(row[19])]
      else:
        flag = 1
        for i in range(len(row)):
          if i != 13 and i != 14 and i != 15 and row[i] == '': # give up missing value
            flag = 0
            break
        if flag and row[13] != '1':
          Normal.append([row[5],int(row[10])])#[row[2],row[3],row[5],float(row[6]),float(row[7]),float(row[8]),int(row[10]),int(row[11]),row[12],int(row[16]),int(row[17]),int(row[18]),int(row[19])]

#print(Index)

normal = []
for i in range(len(Normal)):
  if i % 100 == 0:
    normal.append(Normal[i])

for i in range(len(normal)):
  if normal[i][0] == 'A':
    normal[i][0] = 8 # A -> 8
  else:
    normal[i][0] = int(normal[i][0])

for i in range(len(abnormal)):
  if abnormal[i][0] == 'A':
    abnormal[i][0] = 8 # A -> 8
  else:
    abnormal[i][0] = int(abnormal[i][0])

import random

Test = []
Train = []
P = 0.99
for i in range(len(normal)):
  R = random.random()
  if R > P:
    Test.append(normal[i])
  else:
    Train.append(normal[i])

# fit the model
clf = svm.OneClassSVM(nu=0.05, kernel='rbf', gamma=0.1)
clf.fit(Train)
y_pred_train = clf.predict(Train) # return 1,-1
y_pred_test = clf.predict(Test)   # return 1,-1
y_pred_outliers = clf.predict(abnormal)

# fp/fn
n_error_train = y_pred_train[y_pred_train == -1].size
n_error_test = y_pred_test[y_pred_test == -1].size
n_error_outliers = y_pred_outliers[y_pred_outliers == 1].size

print(n_error_train/len(Train))
print(n_error_test/len(Test))
print(n_error_outliers/len(abnormal))

xx, yy = np.meshgrid(np.linspace(0, 10, 11), np.linspace(0, 10, 11))

# plot the line, the points, and the nearest vectors to the plane
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.figure(figsize=(6,10))
plt.title('Novelty Detection')
plt.contourf(xx, yy, Z, levels=np.linspace(Z.min(), 0, 7), cmap=plt.cm.PuBu)
a = plt.contour(xx, yy, Z, levels=[0], linewidths=2, colors='darkred')
plt.contourf(xx, yy, Z, levels=[0, Z.max()], colors='palevioletred')

s = 40
Train = np.array(Train)
Test = np.array(Test)
abnormal = np.array(abnormal)
b1 = plt.scatter(Train[:, 0], Train[:, 1], c='white', s=s, edgecolors='k')
c = plt.scatter(abnormal[:, 0], abnormal[:, 1], c='gold', s=s,
                edgecolors='k')
b2 = plt.scatter(Test[:, 0], Test[:, 1], c='blueviolet', s=s,
                 edgecolors='k')

plt.axis('tight')
plt.xlim((-1, 10))
plt.ylim((-1, 10))
plt.legend([a.collections[0], b1, b2, c],
           ['learned frontier', 'training observations',
            'new regular observations', 'new abnormal observations'],
           loc='upper left',
           prop=matplotlib.font_manager.FontProperties(size=11))

plt.show()